{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","position","x","y","lastBorder","animationDelay","konami","fillColor","this","draw","from","to","speed","Math","sqrt","pow","border","filter","floor","random","document","documentElement","clientWidth","clientHeight","distanceToTime","setState","randomColor","setTimeout","style","containerStyle","getImageStyle","version","width","height","fill","viewBox","preserveAspectRatio","transform","stroke","d","value","onChange","handleChange","bind","e","target","round","window","innerHeight","toString","background","left","top","transition","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98ec3b5b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Konami from \"react-konami-code\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      position: { x: 0, y: 0 },\r\n      lastBorder: 0,\r\n      animationDelay: 20000,\r\n      konami: false,\r\n      fillColor: \"#ffffff\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n  }\r\n\r\n  distanceToTime(from, to, speed) {\r\n    const distance = Math.sqrt(\r\n      Math.pow(to.y - from.y, 2) + Math.pow(to.x - from.x, 2)\r\n    );\r\n    return distance / (speed / 100);\r\n  }\r\n\r\n  draw() {\r\n    let xOffset = 163;\r\n    let bOffset = 113;\r\n    let tOffset = 42;\r\n    let position = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    let lastBorder = this.state.lastBorder;\r\n    let borders = [0, 1, 2, 3].filter(border => border !== lastBorder);\r\n    let rng = Math.floor(Math.random() * 2);\r\n    let border = borders[rng];\r\n    switch (border) {\r\n      case 0:\r\n      default:\r\n        position.x = Math.floor(\r\n          Math.random() * (document.documentElement.clientWidth - xOffset)\r\n        );\r\n        position.y = 0 - tOffset;\r\n        break;\r\n      case 1:\r\n        position.x = document.documentElement.clientWidth - xOffset;\r\n        position.y = Math.floor(\r\n          Math.random() * (document.documentElement.clientHeight - bOffset)\r\n        );\r\n        break;\r\n      case 2:\r\n        position.x = Math.floor(\r\n          Math.random() * (document.documentElement.clientWidth - xOffset)\r\n        );\r\n        position.y = document.documentElement.clientHeight - bOffset;\r\n        break;\r\n      case 3:\r\n        position.x = 0;\r\n        position.y = Math.floor(\r\n          Math.random() * (document.documentElement.clientHeight - bOffset)\r\n        );\r\n        break;\r\n    }\r\n\r\n    let animationDelay = this.distanceToTime(this.state.position, position, 15);\r\n\r\n    this.setState({\r\n      position,\r\n      animationDelay,\r\n      lastBorder: border,\r\n      fillColor: this.randomColor()\r\n    });\r\n    setTimeout(() => this.draw(), animationDelay);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={this.containerStyle()}>\r\n        <svg\r\n          style={this.getImageStyle()}\r\n          version=\"1.0\"\r\n          width=\"300.000000pt\"\r\n          height=\"168.000000pt\"\r\n          fill={this.randomColor()}\r\n          viewBox=\"0 0 300.000000 168.000000\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          <g\r\n            transform=\"translate(0.000000,168.000000) scale(0.100000,-0.100000)\"\r\n            stroke=\"none\"\r\n          >\r\n            <path d=\"M1914 1316 c-82 -108 -152 -196 -155 -196 -4 0 -35 86 -69 191 -51 158 -64 189 -75 178 -7 -8 -74 -95 -149 -194 -76 -99 -141 -181 -145 -183 -5 -1 -37 84 -73 190 l-65 193 -349 3 c-387 3 -451 -4 -571 -58 -86 -39 -172 -123 -209 -203 -25 -54 -29 -74 -29 -154 0 -85 2 -94 30 -134 41 -59 100 -101 171 -125 50 -16 88 -19 249 -19 221 0 257 7 353 69 130 84 196 181 210 308 l7 63 95 -262 c52 -145 98 -263 101 -263 4 0 73 86 154 191 l148 191 18 -54 c67 -190 115 -318 121 -318 4 0 73 87 155 193 l148 192 7 -54 c11 -93 84 -174 193 -212 117 -41 458 -37 550 7 18 8 66 46 107 84 103 95 133 159 133 287 0 85 -2 94 -30 134 -41 58 -90 95 -160 121 -57 21 -78 23 -391 26 l-331 3 -149 -195z m775 61 c39 -19 74 -98 74 -165 0 -102 -55 -191 -145 -236 -48 -24 -62 -26 -180 -26 l-128 0 -44 43 c-55 53 -71 104 -56 174 23 101 85 170 183 204 63 22 258 26 296 6z m-1937 -40 c57 -44 72 -74 72 -139 -1 -76 -43 -159 -102 -205 -62 -47 -127 -63 -257 -63 -108 0 -113 1 -153 30 -54 39 -76 82 -75 148 0 66 42 153 95 195 65 52 127 67 263 65 114 -3 122 -4 157 -31z\" />\r\n            <path d=\"M1055 644 c-424 -32 -716 -89 -785 -154 -36 -34 -37 -44 -5 -74 114 -106 690 -175 1365 -163 670 12 1105 90 1118 200 3 21 -4 31 -30 47 -80 49 -281 95 -558 126 -109 12 -258 17 -600 19 -250 1 -477 1 -505 -1z m-164 -149 c13 -30 27 -55 30 -55 4 0 17 25 29 55 18 45 27 55 46 55 13 0 24 -5 24 -10 0 -19 -89 -200 -98 -200 -9 0 -102 183 -102 201 0 5 11 9 24 9 19 0 28 -10 47 -55z m317 -47 c-3 -98 -4 -103 -25 -106 -23 -3 -23 -2 -23 102 l0 106 25 0 26 0 -3 -102z m323 64 c39 -43 39 -90 1 -133 -25 -28 -35 -32 -100 -37 l-72 -5 0 108 0 107 71 -4 c65 -3 74 -6 100 -36z m319 18 c0 -17 -7 -20 -50 -20 -43 0 -50 -3 -50 -20 0 -17 7 -20 50 -20 43 0 50 -3 50 -20 0 -17 -7 -20 -50 -20 -47 0 -50 -2 -50 -25 0 -23 3 -25 50 -25 44 0 50 -3 50 -20 0 -19 -5 -21 -72 -18 l-73 3 -3 89 c-2 49 -1 95 2 103 4 9 26 13 76 13 63 0 70 -2 70 -20z m342 -19 c38 -43 38 -90 -1 -133 -27 -30 -35 -33 -86 -33 -51 0 -59 3 -86 33 -36 40 -38 87 -8 126 29 37 55 47 109 42 34 -3 51 -11 72 -35z\" />\r\n            <path d=\"M1410 445 l0 -65 30 0 c37 0 70 31 70 65 0 34 -33 65 -70 65 l-30 0 0 -65z\" />\r\n            <path d=\"M2060 490 c-11 -11 -20 -31 -20 -45 0 -14 9 -34 20 -45 11 -11 31 -20 45 -20 14 0 34 9 45 20 11 11 20 31 20 45 0 14 -9 34 -20 45 -11 11 -31 20 -45 20 -14 0 -34 -9 -45 -20z\" />\r\n          </g>\r\n        </svg>\r\n        <Konami>\r\n          <input\r\n            value={this.state.animationDelay}\r\n            onChange={this.handleChange.bind(this)}\r\n          />\r\n        </Konami>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ animationDelay: e.target.value });\r\n  }\r\n\r\n  getImageHeight() {\r\n    return Math.round(window.innerHeight / 2);\r\n  }\r\n\r\n  randomColor() {\r\n    return `#${Math.round(Math.random() * 16777215).toString(16)}`;\r\n  }\r\n\r\n  containerStyle() {\r\n    return {\r\n      width: \"100vw\",\r\n      height: \"100vh\",\r\n      background: \"#171717\"\r\n    };\r\n  }\r\n\r\n  getImageStyle() {\r\n    return {\r\n      left: this.state.position.x,\r\n      top: this.state.position.y,\r\n      height: \"160px\",\r\n      width: \"160px\",\r\n      position: \"fixed\",\r\n      transition: `left ${this.state.animationDelay}ms linear 0s, top ${this.state.animationDelay}ms linear 0s`,\r\n      fill: `${this.state.fillColor} !important`\r\n    };\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}